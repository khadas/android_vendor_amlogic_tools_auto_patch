From a838c6a408ea14086d258454151576157f9510ff Mon Sep 17 00:00:00 2001
From: Jinping Wang <jinping.wang@amlogic.com>
Date: Wed, 19 Jun 2019 14:08:54 +0800
Subject: [PATCH] cec: support otp [1/1]

PD# SWPL-9793

Problem:
should trigger otp when hot plug in

Solution:
should trigger otp when hot plug in

Verify:
test ok using p212

Change-Id: I3b485f087d0758d52a2832afef26f437731fe3db
Signed-off-by: Jinping Wang <jinping.wang@amlogic.com>
---
 .../com/android/server/hdmi/HdmiCecLocalDevicePlayback.java   | 11 +++++++++--
 .../core/java/com/android/server/hdmi/OneTouchPlayAction.java | 10 +++++-----
 2 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
index 70a88e7..c70bb7a 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
@@ -87,6 +87,12 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         mService.sendCecCommand(HdmiCecMessageBuilder.buildDeviceVendorIdCommand(
                 mAddress, mService.getVendorId()));
         startQueuedActions();
+        boolean isOneTouchPlayEnabled =
+            mService.readBooleanSetting("hdmi_control_one_touch_play_enabled", true);
+        if (isOneTouchPlayEnabled) {
+            oneTouchPlay(null);
+            HdmiLogger.debug("trigger One Touch Play when Address Allocated.");
+        }
     }
 
     @Override
@@ -111,8 +117,9 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         List<OneTouchPlayAction> actions = getActions(OneTouchPlayAction.class);
         if (!actions.isEmpty()) {
             Slog.i(TAG, "oneTouchPlay already in progress");
-            actions.get(0).addCallback(callback);
-            return;
+            //actions.get(0).addCallback(callback);
+            //return;
+            removeAction(OneTouchPlayAction.class);
         }
         OneTouchPlayAction action = OneTouchPlayAction.create(this, Constants.ADDR_TV,
                 callback);
diff --git a/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java b/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
index 5c66316..9e7d07d 100644
--- a/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
+++ b/services/core/java/com/android/server/hdmi/OneTouchPlayAction.java
@@ -47,7 +47,7 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
 
     // The maximum number of times we send <Give Device Power Status> before we give up.
     // We wait up to RESPONSE_TIMEOUT_MS * LOOP_COUNTER_MAX = 20 seconds.
-    private static final int LOOP_COUNTER_MAX = 10;
+    private static final int LOOP_COUNTER_MAX = 1;
 
     private final int mTargetAddress;
     private final List<IHdmiControlCallback> mCallbacks = new ArrayList<>();
@@ -57,7 +57,7 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
     // Factory method. Ensures arguments are valid.
     static OneTouchPlayAction create(HdmiCecLocalDevicePlayback source,
             int targetAddress, IHdmiControlCallback callback) {
-        if (source == null || callback == null) {
+        if (source == null) {
             Slog.e(TAG, "Wrong arguments");
             return null;
         }
@@ -76,9 +76,9 @@ final class OneTouchPlayAction extends HdmiCecFeatureAction {
     boolean start() {
         sendCommand(HdmiCecMessageBuilder.buildTextViewOn(getSourceAddress(), mTargetAddress));
         broadcastActiveSource();
-        queryDevicePowerStatus();
-        mState = STATE_WAITING_FOR_REPORT_POWER_STATUS;
-        addTimer(mState, HdmiConfig.TIMEOUT_MS);
+        //queryDevicePowerStatus();
+        //mState = STATE_WAITING_FOR_REPORT_POWER_STATUS;
+        //addTimer(mState, HdmiConfig.TIMEOUT_MS);
         return true;
     }
 
-- 
2.10.2

