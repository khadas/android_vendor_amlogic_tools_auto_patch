From c3e256c663ec4e921b7fcf4011d77be95841fe76 Mon Sep 17 00:00:00 2001
From: Jinping Wang <jinping.wang@amlogic.com>
Date: Tue, 8 Jan 2019 19:48:02 +0800
Subject: [PATCH] cec: cec all patch [1/1]

PD# SWPL-2438

Problem:
cec not work well

Solution:
fix cec issues

Verify:
verify by p321

Change-Id: If0712be887b35fc2249c6e42f6b5dadee484e01f
Signed-off-by: Jinping Wang <jinping.wang@amlogic.com>
---
 .../com/android/server/audio/AudioService.java     |  2 +-
 .../android/server/hdmi/HdmiCecLocalDevice.java    |  2 +-
 .../server/hdmi/HdmiCecLocalDevicePlayback.java    | 23 ++++++++++++++++++++--
 .../android/server/hdmi/HdmiCecLocalDeviceTv.java  |  2 ++
 .../android/server/hdmi/HdmiControlService.java    |  4 ++--
 .../com/android/server/hdmi/RequestArcAction.java  |  2 +-
 .../android/server/hdmi/RoutingControlAction.java  | 11 +++++++----
 7 files changed, 35 insertions(+), 11 deletions(-)
 mode change 100755 => 100644 services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
index d1de55d..0280df9 100644
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -7428,7 +7428,7 @@ public class AudioService extends IAudioService.Stub
                 return false;
             }
             boolean suppress = false;
-            if (resolvedStream == DEFAULT_VOL_STREAM_NO_PLAYBACK && mController != null) {
+            if (resolvedStream == AudioSystem.STREAM_RING && mController != null) {
                 final long now = SystemClock.uptimeMillis();
                 if ((flags & AudioManager.FLAG_SHOW_UI) != 0 && !mVisible) {
                     // ui will become visible
diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java
old mode 100755
new mode 100644
index 228b937..00569a9
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevice.java
@@ -64,7 +64,6 @@ abstract class HdmiCecLocalDevice {
     protected HdmiDeviceInfo mDeviceInfo;
     protected int mLastKeycode = HdmiCecKeycode.UNSUPPORTED_KEYCODE;
     protected int mLastKeyRepeatCount = 0;
-
     static class ActiveSource {
         int logicalAddress;
         int physicalAddress;
@@ -993,6 +992,7 @@ abstract class HdmiCecLocalDevice {
     @ServiceThreadOnly
     protected void sendKeyEvent(int keyCode, boolean isPressed) {
         assertRunOnServiceThread();
+        HdmiLogger.debug("sendKeyEvent keyCode:  " + keyCode);
         if (!HdmiCecKeycode.isSupportedKeycode(keyCode)) {
             Slog.w(TAG, "Unsupported key: " + keyCode);
             return;
diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
index b3aef04..70a88e7 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDevicePlayback.java
@@ -48,7 +48,7 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
             SystemProperties.getBoolean(Constants.PROPERTY_WAKE_ON_HOTPLUG, true);
 
     private static final boolean SET_MENU_LANGUAGE =
-            SystemProperties.getBoolean(Constants.PROPERTY_SET_MENU_LANGUAGE, false);
+            SystemProperties.getBoolean(Constants.PROPERTY_SET_MENU_LANGUAGE, true);
 
     private boolean mIsActiveSource = false;
 
@@ -286,6 +286,10 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         assertRunOnServiceThread();
         int newPath = HdmiUtils.twoBytesToInt(message.getParams(), 2);
         maySetActiveSource(newPath);
+        int port = getLocalPortFromPhysicalAddress(newPath);
+        if (port == 0) {
+            maySendActiveSource(message.getSource());
+        }
         return true;  // Broadcast message.
     }
 
@@ -337,9 +341,24 @@ final class HdmiCecLocalDevicePlayback extends HdmiCecLocalDevice {
         if (!SET_MENU_LANGUAGE) {
             return false;
         }
-
         try {
             String iso3Language = new String(message.getParams(), 0, 3, "US-ASCII");
+            HdmiLogger.debug("handleSetMenuLanguage, iso3Language: " + iso3Language);
+            if (iso3Language.equals("chi") || iso3Language.equals("zho")) {
+                Locale locale = null;
+                if (iso3Language.equals("zho")) {
+                    locale = new Locale("zh", "CN"); //LanguageCode.CountryCode
+                } else {
+                    locale = new Locale("zh", "TW");
+                }
+                try {
+                    LocalePicker.updateLocale(locale);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+                return true;
+            }
+
             Locale currentLocale = mService.getContext().getResources().getConfiguration().locale;
             if (currentLocale.getISO3Language().equals(iso3Language)) {
                 // Do not switch language if the new language is the same as the current one.
diff --git a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
index de0f298..66b1964 100644
--- a/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
+++ b/services/core/java/com/android/server/hdmi/HdmiCecLocalDeviceTv.java
@@ -273,6 +273,7 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
     @ServiceThreadOnly
     void deviceSelect(int id, IHdmiControlCallback callback) {
         assertRunOnServiceThread();
+        HdmiLogger.debug("deviceSelect deviceId: " + id);
         HdmiDeviceInfo targetDevice = mDeviceInfos.get(id);
         if (targetDevice == null) {
             invokeCallback(callback, HdmiControlManager.RESULT_TARGET_NOT_AVAILABLE);
@@ -394,6 +395,7 @@ final class HdmiCecLocalDeviceTv extends HdmiCecLocalDevice {
     void doManualPortSwitching(int portId, IHdmiControlCallback callback) {
         assertRunOnServiceThread();
         // Seq #20
+        HdmiLogger.debug("doManualPortSwitching portId: " + portId);
         if (!mService.isValidPortId(portId)) {
             invokeCallback(callback, HdmiControlManager.RESULT_INCORRECT_MODE);
             return;
diff --git a/services/core/java/com/android/server/hdmi/HdmiControlService.java b/services/core/java/com/android/server/hdmi/HdmiControlService.java
index a20b427..1468545 100644
--- a/services/core/java/com/android/server/hdmi/HdmiControlService.java
+++ b/services/core/java/com/android/server/hdmi/HdmiControlService.java
@@ -1357,7 +1357,7 @@ public class HdmiControlService extends SystemService {
         @Override
         public void sendKeyEvent(final int deviceType, final int keyCode, final boolean isPressed) {
             enforceAccessPermission();
-            runOnServiceThread(new Runnable() {
+            runOnServiceThreadAtFrontOfQueue(new Runnable() {
                 @Override
                 public void run() {
                     HdmiMhlLocalDeviceStub device = mMhlController.getLocalDevice(mActivePortId);
@@ -2160,7 +2160,7 @@ public class HdmiControlService extends SystemService {
 
         final List<HdmiCecLocalDevice> devices = getAllLocalDevices();
 
-        if (!isStandbyMessageReceived() && !canGoToStandby()) {
+        if ((STANDBY_SHUTDOWN == standbyAction)||(!isStandbyMessageReceived() && !canGoToStandby())) {
             mPowerStatus = HdmiControlManager.POWER_STATUS_STANDBY;
             for (HdmiCecLocalDevice device : devices) {
                 device.onStandby(mStandbyMessageReceived, standbyAction);
diff --git a/services/core/java/com/android/server/hdmi/RequestArcAction.java b/services/core/java/com/android/server/hdmi/RequestArcAction.java
index c70101c..7f453bc 100644
--- a/services/core/java/com/android/server/hdmi/RequestArcAction.java
+++ b/services/core/java/com/android/server/hdmi/RequestArcAction.java
@@ -85,7 +85,7 @@ abstract class RequestArcAction extends HdmiCecFeatureAction {
             return;
         }
         HdmiLogger.debug("[T] RequestArcAction.");
-        disableArcTransmission();
+        //disableArcTransmission();
         finish();
     }
 }
diff --git a/services/core/java/com/android/server/hdmi/RoutingControlAction.java b/services/core/java/com/android/server/hdmi/RoutingControlAction.java
index 6c8694e..10fed07 100644
--- a/services/core/java/com/android/server/hdmi/RoutingControlAction.java
+++ b/services/core/java/com/android/server/hdmi/RoutingControlAction.java
@@ -66,7 +66,7 @@ final class RoutingControlAction extends HdmiCecFeatureAction {
     // <Inactive Source> command.
     private final boolean mNotifyInputChange;
 
-    @Nullable private final IHdmiControlCallback mCallback;
+    @Nullable private IHdmiControlCallback mCallback;
 
     // The latest routing path. Updated by each <Routing Information> from CEC switches.
     private int mCurrentRoutingPath;
@@ -88,6 +88,10 @@ final class RoutingControlAction extends HdmiCecFeatureAction {
     public boolean start() {
         mState = STATE_WAIT_FOR_ROUTING_INFORMATION;
         addTimer(mState, TIMEOUT_ROUTING_INFORMATION_MS);
+        tv().setPrevPortId(tv().getActivePortId());
+        tv().setActivePath(mCurrentRoutingPath);
+        finishWithCallback(HdmiControlManager.RESULT_SUCCESS);
+        mCallback = null;
         return true;
     }
 
@@ -105,6 +109,7 @@ final class RoutingControlAction extends HdmiCecFeatureAction {
                 return true;
             }
             mCurrentRoutingPath = routingPath;
+            tv().setActivePath(mCurrentRoutingPath);
             // Stop possible previous routing change sequence if in progress.
             removeActionExcept(RoutingControlAction.class, this);
             addTimer(mState, TIMEOUT_ROUTING_INFORMATION_MS);
@@ -128,9 +133,7 @@ final class RoutingControlAction extends HdmiCecFeatureAction {
     }
 
     private void updateActiveInput() {
-        HdmiCecLocalDeviceTv tv = tv();
-        tv.setPrevPortId(tv.getActivePortId());
-        tv.updateActiveInput(mCurrentRoutingPath, mNotifyInputChange);
+        tv().updateActiveInput(mCurrentRoutingPath, mNotifyInputChange);
     }
 
     private int getTvPowerStatus() {
-- 
2.10.2

