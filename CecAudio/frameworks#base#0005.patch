From 1f2b7ed8df4309c832889eba9cac9e051e713bfc Mon Sep 17 00:00:00 2001
From: wenbiao zhang <wenbiao.zhang@amlogic.com>
Date: Fri, 18 Jan 2019 17:56:17 +0800
Subject: [PATCH] audio: send too many broadcast when longpress vol+/- [1/1]

PD#TV-470

Problem:
when vol changed,send broadcast for each type and device,
so too many broadcast when longpress vol key, and take lots of cpu

Solution:
send a delay message to send broadcast

Verify:
t950

Change-Id: I7a194639eae1214a9d3517bba233851a8aba1444
Signed-off-by: wenbiao zhang <wenbiao.zhang@amlogic.com>
---
 .../com/android/server/audio/AudioService.java     | 37 +++++++++++++++++++---
 1 file changed, 33 insertions(+), 4 deletions(-)
 mode change 100644 => 100755 services/core/java/com/android/server/audio/AudioService.java

diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java
old mode 100644
new mode 100755
index 867a8f9..5df78b8
--- a/services/core/java/com/android/server/audio/AudioService.java
+++ b/services/core/java/com/android/server/audio/AudioService.java
@@ -267,8 +267,14 @@ public class AudioService extends IAudioService.Stub
     private static final int MSG_DISABLE_AUDIO_FOR_UID = 104;
     private static final int MSG_SET_HEARING_AID_CONNECTION_STATE = 105;
     private static final int MSG_BTA2DP_DOCK_TIMEOUT = 106;
+
+    // delay to send volume changed broadcast for longpress vol+/- key
+    private static final int MSG_VOLUME_CHANGED_BROADCAST_DELAY = 1000;
     // end of messages handled under wakelock
 
+    // Timeout for volume changed broadcast delays
+    private static final int VOLUME_CHANGED_BROADCAST_DELAY_MILLIS = 300;
+
     private static final int BTA2DP_DOCK_TIMEOUT_MILLIS = 8000;
     // Timeout for connection to bluetooth headset service
     private static final int BT_HEADSET_CNCT_TIMEOUT_MS = 3000;
@@ -4800,6 +4806,7 @@ public class AudioService extends IAudioService.Stub
         private final SparseIntArray mIndexMap = new SparseIntArray(8);
         private final Intent mVolumeChanged;
         private final Intent mStreamDevicesChanged;
+        private boolean mVolumeChangedFlag = false;
 
         private VolumeStreamState(String settingName, int streamType) {
 
@@ -5037,6 +5044,8 @@ public class AudioService extends IAudioService.Stub
             if (changed) {
                 oldIndex = (oldIndex + 5) / 10;
                 index = (index + 5) / 10;
+                if (oldIndex == index)
+                    return false;
                 // log base stream changes to the event log
                 if (mStreamVolumeAlias[mStreamType] == mStreamType) {
                     if (caller == null) {
@@ -5047,10 +5056,16 @@ public class AudioService extends IAudioService.Stub
                 }
                 // fire changed intents for all streams
                 mVolumeChanged.putExtra(AudioManager.EXTRA_VOLUME_STREAM_VALUE, index);
-                mVolumeChanged.putExtra(AudioManager.EXTRA_PREV_VOLUME_STREAM_VALUE, oldIndex);
-                mVolumeChanged.putExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE_ALIAS,
-                        mStreamVolumeAlias[mStreamType]);
-                sendBroadcastToAll(mVolumeChanged);
+                if (!mVolumeChangedFlag) {
+                    mVolumeChanged.putExtra(AudioManager.EXTRA_PREV_VOLUME_STREAM_VALUE, oldIndex);
+                    mVolumeChanged.putExtra(AudioManager.EXTRA_VOLUME_STREAM_TYPE_ALIAS,
+                            mStreamVolumeAlias[mStreamType]);
+                }
+                //sendBroadcastToAll(mVolumeChanged);
+                mVolumeChangedFlag = true;
+                if (!mAudioHandler.hasMessages(MSG_VOLUME_CHANGED_BROADCAST_DELAY))
+                    mAudioHandler.sendEmptyMessageDelayed(MSG_VOLUME_CHANGED_BROADCAST_DELAY,
+                            VOLUME_CHANGED_BROADCAST_DELAY_MILLIS);
             }
             return changed;
         }
@@ -5295,6 +5310,17 @@ public class AudioService extends IAudioService.Stub
 
     }
 
+    private void sendDelayBroadcast() {
+        final int numStreamTypes = AudioSystem.getNumStreamTypes();
+        for (int streamType = numStreamTypes - 1; streamType >= 0; streamType--) {
+            final VolumeStreamState state = mStreamStates[streamType];
+            if (state.mVolumeChangedFlag) {
+                state.mVolumeChangedFlag = false;
+                sendBroadcastToAll(state.mVolumeChanged);
+            }
+        }
+    }
+
     /** Handles internal volume messages in separate volume thread. */
     private class AudioHandler extends Handler {
 
@@ -5760,6 +5786,9 @@ public class AudioService extends IAudioService.Stub
                 case MSG_ENABLE_SURROUND_FORMATS:
                     onEnableSurroundFormats((ArrayList<Integer>) msg.obj);
                     break;
+                case MSG_VOLUME_CHANGED_BROADCAST_DELAY:
+                    sendDelayBroadcast();
+                    break;
             }
         }
     }
-- 
2.7.4

